Fig6 #View figure
tanks.L.mean <- mean(rbind(tank.lightdata[,2], tank.lightdata[,3]), na.rm=T) #Calculate the grand average of both tanks
tanks.L.mean #View data
tanks.L.se <- sd(rbind(tank.lightdata[,2], tank.lightdata[,3]), na.rm=T)/sqrt(Tank4.light.N+Tank5.light.N) #Calculate the overal standard error of both tanks
tanks.L.se #View data
#Plotting diurnal cycles
tank.time <- format(as.POSIXct(mydate.tanks) ,format = "%H:%M") #Format time into only hours and minutes
tank.lights <- cbind(tank.lightdata, tank.time) #create a dataframe
colnames(tank.lights) <- c("Date", "Tank4", "Tank5", "Time") #Rename columns to describe contents
tank.lights #View Data
quarterly.tank.light.mean4 <- aggregate(Tank4 ~ Time, data=tank.lights, mean, na.rm=TRUE) #calculate mean of temperature for every 15 min interval
quarterly.tank.light.se4 <- aggregate(Tank4 ~ Time, data=tank.lights, std.error, na.rm=TRUE)  #calculate standard error of the mean of temperature for every 15 min interval
quarterly.tank.light.mean5 <- aggregate(Tank5 ~ Time, data=tank.lights, mean, na.rm=TRUE) #calculate mean of temperature for every 15 min interval
quarterly.tank.light.mean5[58,1] <- "20:00" #add empty row
quarterly.tank.light.mean5[59,1] <- "20:15" #add empty row
quarterly.tank.light.se5 <- aggregate(Tank5 ~ Time, data=tank.lights, std.error, na.rm=TRUE)  #calculate standard error of the mean of temperature for every 15 min interval
quarterly.tank.light.se5[58,1] <- "20:00" #add empty row
quarterly.tank.light.se5[59,1] <- "20:15" #add empty row
tank.light.means <- data.frame(quarterly.tank.light.mean4, quarterly.tank.light.se4$Tank4, quarterly.tank.light.mean5$Tank5, quarterly.tank.light.se5$Tank5) #combine mean and standard error results
colnames(tank.light.means) <- c("Time", "Tank4.mean", "Tank4.se", "Tank5.mean", "Tank5.se")  #Rename columns to describe contents
Fig7 <- ggplot(tank.light.means, aes(Time)) + # plot mean temp by tank
geom_point(aes(y = Tank4.mean, colour="Ambient")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank4.mean+Tank4.se, ymin=Tank4.mean-Tank4.se), position=position_dodge(0.9), data=tank.light.means) + #set values for standard error bars and offset on the X axis for clarity
geom_point(aes(y = Tank5.mean, colour="High")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank5.mean+Tank5.se, ymin=Tank5.mean-Tank5.se), position=position_dodge(0.9), data=tank.light.means) + #set values for standard error bars and offset on the X axis for clarity
scale_colour_manual("Treatment", values = c("blue","red")) +
scale_x_discrete(breaks=c("0:00", "06:00", "12:00", "18:00")) + #set discrete breaks on the X axis
ylim(0,300) + #set Y axis limits
ggtitle("F) Adult Exposure") + #Label graphic title
xlab("Time") + #Label the X Axis
ylab(bquote('Irradiance ('*mu~'mol' ~photons ~ m^-2~s^-1*')')) + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0), #Justify the title to the top left
legend.position='none') #remove legend background
Fig7 #View figure
#Tank Temperature Data for Larval Month 1 Exposure Period (12July - 25Aug14)
M1.tank.data <- read.csv("Month1_Tank_Temp.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
mydate.tanks <- strptime(M1.tank.data$Date.Time, format="%m/%d/%y %H:%M") #convert date format to characters
M1.tank.data$Tank4.cal <-(M1.tank.data$Tank4*T4.lm[2])+T4.lm[1] #Apply the cross calibration of temperature to standard logger #1
M1.tank.data$Tank5.cal <-(M1.tank.data$Tank5*T5.lm[2])+T5.lm[1] #Apply the cross calibration of temperature to standard logger #1
M1.tank.tempdata <-data.frame(mydate.tanks, M1.tank.data$Tank4.cal, M1.tank.data$Tank5.cal) #make a dataframe of temperature and time
colnames(M1.tank.tempdata) <- c("Date.Time", "Tank4", "Tank5")
Tank4.M1.temp.N <- sum(!is.na(M1.tank.tempdata$Tank4)) #Count sample size
Tank5.M1.temp.N <- sum(!is.na(M1.tank.tempdata$Tank5)) #Count sample size
Fig8 <- ggplot(M1.tank.tempdata, aes(Date.Time)) + #plot tank temperature data
geom_line(aes(y = Tank4, colour="Ambient")) + #plot Temperature data as a line on the Y axis with date as the X axis
geom_line(aes(y = Tank5, colour="High")) + #plot Temperature data as a line on the Y axis with date as the X axis
scale_colour_manual("Treatment", values = c("blue","red")) + #add colors for treatments
xlab("Date") + #Label the X Axis
ylab("Temperature °C") + #Label the Y Axis
ggtitle("") + #label the main title
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig8 #View figure
M1.tanks.T.mean <- mean(rbind(M1.tank.tempdata[,2], M1.tank.tempdata[,3]), na.rm=T) #Calculate the grand average of both tanks
M1.tanks.T.mean #View data
M1.tanks.T.se <- sd(rbind(M1.tank.tempdata[,2], M1.tank.tempdata[,3]), na.rm=T)/sqrt(Tank4.M1.temp.N+Tank5.M1.temp.N) #Calculate the overal standard error of both tanks
M1.tanks.T.se #View data
#Plotting diurnal cycles
M1.tank.time <- format(as.POSIXct(mydate.tanks) ,format = "%H:%M") #Format time into only hours and minutes
M1.tank.temperatures <- cbind(M1.tank.tempdata, M1.tank.time) #create a dataframe
colnames(M1.tank.temperatures) <- c("Date", "Tank4", "Tank5", "Time") #Rename columns to describe contents
M1.tank.temperatures #View Data
quarterly.M1.tank.temp.mean4 <- aggregate(Tank4 ~ Time, data=M1.tank.temperatures, mean, na.rm=TRUE) #calculate mean of temperature for every 15 min interval
quarterly.M1.tank.temp.se4 <- aggregate(Tank4 ~ Time, data=M1.tank.temperatures, std.error, na.rm=TRUE)  #calculate standard error of the mean of temperature for every 15 min interval
quarterly.M1.tank.temp.mean5 <- aggregate(Tank5 ~ Time, data=M1.tank.temperatures, mean, na.rm=TRUE) #calculate mean of temperature for every 15 min interval
quarterly.M1.tank.temp.se5 <- aggregate(Tank5 ~ Time, data=M1.tank.temperatures, std.error, na.rm=TRUE)  #calculate standard error of the mean of temperature for every 15 min interval
M1.tank.temp.means <- data.frame(quarterly.M1.tank.temp.mean4, quarterly.M1.tank.temp.se4$Tank4, quarterly.M1.tank.temp.mean5$Tank5, quarterly.M1.tank.temp.se5$Tank5) #combine mean and standard error results
colnames(M1.tank.temp.means) <- c("Time", "Tank4.mean", "Tank4.se", "Tank5.mean", "Tank5.se")  #Rename columns to describe contents
Fig9 <- ggplot(M1.tank.temp.means, aes(Time)) + # plot mean temp by tank
geom_point(aes(y = Tank4.mean, colour="Ambient")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank4.mean+Tank4.se, ymin=Tank4.mean-Tank4.se), position=position_dodge(0.9), data=M1.tank.temp.means) + #set values for standard error bars and offset on the X axis for clarity
geom_point(aes(y = Tank5.mean, colour="High")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank5.mean+Tank5.se, ymin=Tank5.mean-Tank5.se), position=position_dodge(0.9), data=M1.tank.temp.means) + #set values for standard error bars and offset on the X axis for clarity
scale_colour_manual("Treatment", values = c("blue","red")) +
scale_x_discrete(breaks=c("01:00", "06:00", "12:00", "18:00", "23:00")) + #set discrete breaks on the X axis
ggtitle("C) Month 1 Larval Exposure") + #Label graphic title
ylim(23.5,29) + #Set Y axis limits
xlab("Time") + #Label the X Axis
ylab("Temperature (°C)") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0), #Justify the title to the top left
legend.position='none') #remove legend background
Fig9 #View figure
#Tank Light Data for Larval Month 1 Exposure Period (12July - 25Aug14)
M1.tank.light.data <- read.csv("Month1_Tank_Light.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
M1.tank.light.data[M1.tank.light.data == 0] <- NA
mydate.tanks <- strptime(M1.tank.light.data$Date.Time, format="%m/%d/%y %H:%M") #convert date format to characters
M1.tank.light.data$Tank4.quanta <-(M1.tank.light.data$Tank4)/(15*60) #Assign light column in dataframe and convert to units of µmol m-2 s-1
M1.tank.light.data$Tank5.quanta <-(M1.tank.light.data$Tank5)/(15*60) #Assign light column in dataframe and convert to units of µmol m-2 s-1
M1.tank.light.data$Tank4.cal <-(M1.tank.light.data$Tank4.quanta*L4.lm[2])+L4.lm[1] #Apply the cross calibration of temperature to standard logger #1
M1.tank.light.data$Tank5.cal <-(M1.tank.light.data$Tank5.quanta*L5.lm[2])+L5.lm[1] #Apply the cross calibration of temperature to standard logger #1
M1.tank.lightdata <-data.frame(mydate.tanks, M1.tank.light.data$Tank4.cal, M1.tank.light.data$Tank5.cal) #make a dataframe of temperature and time
colnames(M1.tank.lightdata) <- c("Date.Time", "Tank4", "Tank5")
Tank4.M1.light.N <- sum(!is.na(M1.tank.lightdata$Tank4)) #Count sample size
Tank5.M1.light.N <- sum(!is.na(M1.tank.lightdata$Tank5)) #Count sample size
Fig10 <- ggplot(M1.tank.lightdata, aes(Date.Time)) + #plot tank light data
geom_line(aes(y = Tank4, colour="Ambient")) + #plot light data as a line on the Y axis with date as the X axis
geom_line(aes(y = Tank5, colour="High")) + #plot light data as a line on the Y axis with date as the X axis
scale_colour_manual("Treatment", values = c("blue","red")) + #add colors for treatments
xlab("Date") + #Label the X Axis
ylab(bquote('Irradiance ('*mu~'mol' ~photons ~ m^-2~s^-1*')')) + #Label the Y Axis
ggtitle("") + #label the main title
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig10 #View figure
M1.tanks.L.mean <- mean(rbind(M1.tank.lightdata[,2], M1.tank.lightdata[,3]), na.rm=T) #Calculate the grand average of both tanks
M1.tanks.L.mean #View data
M1.tanks.L.se <- sd(rbind(M1.tank.lightdata[,2], M1.tank.lightdata[,3]), na.rm=T)/sqrt(Tank4.M1.light.N+Tank5.M1.light.N) #Calculate the overal standard error of both tanks
M1.tanks.L.se #View data
#Plotting diurnal cycles
M1.tank.time <- format(as.POSIXct(mydate.tanks) ,format = "%H:%M") #Format time into only hours and minutes
M1.tank.lights <- cbind(M1.tank.lightdata, M1.tank.time) #create a dataframe
colnames(M1.tank.lights) <- c("Date", "Tank4", "Tank5", "Time") #Rename columns to describe contents
M1.tank.lights #View Data
#Plotting diurnal cycles
M1.tank.time <- format(as.POSIXct(mydate.tanks) ,format = "%H:%M") #Format time into only hours and minutes
M1.tank.lights <- cbind(M1.tank.lightdata, M1.tank.time) #create a dataframe
colnames(M1.tank.lights) <- c("Date", "Tank4", "Tank5", "Time") #Rename columns to describe contents
M1.tank.lights #View Data
quarterly.M1.tank.light.mean4 <- aggregate(Tank4 ~ Time, data=M1.tank.lights, mean, na.rm=TRUE) #calculate mean for every 15 min interval
quarterly.M1.tank.light.mean4 <- rbind(c("06:00","NA"), quarterly.M1.tank.light.mean4)
quarterly.M1.tank.light.mean4 <- rbind(c("05:45","NA"), quarterly.M1.tank.light.mean4)
quarterly.M1.tank.light.mean4[56,c(1,2)] <- c("19:30", "NA") #add empty row
quarterly.M1.tank.light.mean4[57,c(1,2)] <- c("19:45", "NA") #add empty row
quarterly.M1.tank.light.mean4[58,c(1,2)] <- c("20:00", "NA") #add empty row
quarterly.M1.tank.light.mean4[59,c(1,2)] <- c("20:15", "NA") #add empty row
quarterly.M1.tank.light.mean4$Tank4 <- as.numeric(quarterly.M1.tank.light.mean4$Tank4) #set as numeric
quarterly.M1.tank.light.se4 <- aggregate(Tank4 ~ Time, data=M1.tank.lights, std.error, na.rm=TRUE)  #calculate standard error of the mean for every 15 min interval
quarterly.M1.tank.light.se4 <- rbind(c("06:00","NA"), quarterly.M1.tank.light.se4) #combine rows
quarterly.M1.tank.light.se4 <- rbind(c("05:45","NA"), quarterly.M1.tank.light.se4) #combine rows
quarterly.M1.tank.light.se4[56,c(1,2)] <- c("19:30", "NA") #add empty row
quarterly.M1.tank.light.se4[57,c(1,2)] <- c("19:45", "NA") #add empty row
quarterly.M1.tank.light.se4[58,c(1,2)] <- c("20:00", "NA") #add empty row
quarterly.M1.tank.light.se4[59,c(1,2)] <- c("20:15", "NA") #add empty row
quarterly.M1.tank.light.se4$Tank4 <- as.numeric(quarterly.M1.tank.light.se4$Tank4) #set as numeric
quarterly.M1.tank.light.mean5 <- aggregate(Tank5 ~ Time, data=M1.tank.lights, mean, na.rm=TRUE) #calculate mean for every 15 min interval
quarterly.M1.tank.light.mean5 <- rbind(c("05:45","NA"), quarterly.M1.tank.light.mean5) #combine rows
quarterly.M1.tank.light.mean5[57,c(1,2)] <- c("19:45", "NA") #add empty row
quarterly.M1.tank.light.mean5[58,c(1,2)] <- c("20:00", "NA") #add empty row
quarterly.M1.tank.light.mean5[59,c(1,2)] <- c("20:15", "NA") #add empty row
quarterly.M1.tank.light.mean5$Tank5 <- as.numeric(quarterly.M1.tank.light.mean5$Tank5) #set as numeric
quarterly.M1.tank.light.se5 <- aggregate(Tank5 ~ Time, data=M1.tank.lights, std.error, na.rm=TRUE)  #calculate standard error of the mean  for every 15 min interval
quarterly.M1.tank.light.se5 <- rbind(c("05:45","NA"), quarterly.M1.tank.light.se5) #combine rows
quarterly.M1.tank.light.se5[57,c(1,2)] <- c("19:45", "NA") #add empty row
quarterly.M1.tank.light.se5[58,c(1,2)] <- c("20:00", "NA") #add empty row
quarterly.M1.tank.light.se5[59,c(1,2)] <- c("20:15", "NA") #add empty row
quarterly.M1.tank.light.se5$Tank5 <- as.numeric(quarterly.M1.tank.light.se5$Tank5) #set as numeric
M1.tank.light.means <-data.frame(quarterly.M1.tank.light.mean4,quarterly.M1.tank.light.se4$Tank4,quarterly.M1.tank.light.mean5$Tank5,quarterly.M1.tank.light.se5$Tank5) #make a dataframe
colnames(M1.tank.light.means) <- c("Time", "Tank4.mean", "Tank4.se", "Tank5.mean", "Tank5.se")  #Rename columns to describe contents
Fig11 <- ggplot(M1.tank.light.means, aes(Time)) + # plot mean temp by tank
geom_point(aes(y = Tank4.mean, colour="Ambient")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank4.mean+Tank4.se, ymin=Tank4.mean-Tank4.se), position=position_dodge(0.9), data=M1.tank.light.means) + #set values for standard error bars and offset on the X axis for clarity
geom_point(aes(y = Tank5.mean, colour="High")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank5.mean+Tank5.se, ymin=Tank5.mean-Tank5.se), position=position_dodge(0.9), data=M1.tank.light.means) + #set values for standard error bars and offset on the X axis for clarity
scale_colour_manual("Treatment", values = c("blue","red")) +
scale_x_discrete(breaks=c("0:00", "06:00", "12:00", "18:00")) + #set discrete breaks on the X axis
ylim(0,300) + #set Y axis limits
ggtitle("G) Month 1 Larval Exposure") + #Label graphic title
xlab("Time") + #Label the X Axis
ylab(bquote('Irradiance ('*mu~'mol' ~photons ~ m^-2~s^-1*')')) + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0), #Justify the title to the top left
legend.position='none') #remove legend background
Fig11 #View figure
#Tank Temperature Data for Larval Month 6 Exposure Period (12July - 28January15)
M6.tank.data <- read.csv("Month6_Tank_Temp.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
mydate.tanks <- strptime(M6.tank.data$Date.Time, format="%m/%d/%y %H:%M") #convert date format to characters
M6.tank.data$Tank4.cal <-(M6.tank.data$Tank4*T4.lm[2])+T4.lm[1] #Apply the cross calibration of temperature to standard logger #1
M6.tank.data$Tank5.cal <-(M6.tank.data$Tank5*T5.lm[2])+T5.lm[1] #Apply the cross calibration of temperature to standard logger #1
M6.tank.tempdata <-data.frame(mydate.tanks, M6.tank.data$Tank4.cal, M6.tank.data$Tank5.cal) #make a dataframe of temperature and time
colnames(M6.tank.tempdata) <- c("Date.Time", "Tank4", "Tank5")
Tank4.M6.temp.N <- sum(!is.na(M6.tank.tempdata$Tank4)) #Count sample size
Tank5.M6.temp.N <- sum(!is.na(M6.tank.tempdata$Tank5)) #Count sample size
Fig12 <- ggplot(M6.tank.tempdata, aes(Date.Time)) + #plot tank temperature data
geom_line(aes(y = Tank4, colour="Ambient")) + #plot Temperature data as a line on the Y axis with date as the X axis
geom_line(aes(y = Tank5, colour="High")) + #plot Temperature data as a line on the Y axis with date as the X axis
scale_colour_manual("Treatment", values = c("blue","red")) + #add colors for treatments
xlab("Date") + #Label the X Axis
ylab("Temperature °C") + #Label the Y Axis
ggtitle("") + #label the main title
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig12 #View figure
M6.tanks.T.mean <- mean(rbind(M6.tank.tempdata[,2], M6.tank.tempdata[,3]), na.rm=T) #Calculate the grand average of both tanks
M6.tanks.T.mean #View data
M6.tanks.T.se <- sd(rbind(M6.tank.tempdata[,2], M6.tank.tempdata[,3]), na.rm=T)/sqrt(Tank4.M6.temp.N+Tank5.M6.temp.N) #Calculate the overal standard error of both tanks
M6.tanks.T.se #View data
#Plotting diurnal cycles
M6.tank.time <- format(as.POSIXct(mydate.tanks) ,format = "%H:%M") #Format time into only hours and minutes
M6.tank.temperatures <- cbind(M6.tank.tempdata, M6.tank.time) #create a dataframe
colnames(M6.tank.temperatures) <- c("Date", "Tank4", "Tank5", "Time") #Rename columns to describe contents
M6.tank.temperatures #View Data
quarterly.M6.tank.temp.mean4 <- aggregate(Tank4 ~ Time, data=M6.tank.temperatures, mean, na.rm=TRUE) #calculate mean of temperature for every 15 min interval
quarterly.M6.tank.temp.se4 <- aggregate(Tank4 ~ Time, data=M6.tank.temperatures, std.error, na.rm=TRUE)  #calculate standard error of the mean of temperature for every 15 min interval
quarterly.M6.tank.temp.mean5 <- aggregate(Tank5 ~ Time, data=M6.tank.temperatures, mean, na.rm=TRUE) #calculate mean of temperature for every 15 min interval
quarterly.M6.tank.temp.se5 <- aggregate(Tank5 ~ Time, data=M6.tank.temperatures, std.error, na.rm=TRUE)  #calculate standard error of the mean of temperature for every 15 min interval
M6.tank.temp.means <- data.frame(quarterly.M6.tank.temp.mean4, quarterly.M6.tank.temp.se4$Tank4, quarterly.M6.tank.temp.mean5$Tank5, quarterly.M6.tank.temp.se5$Tank5) #combine mean and standard error results
colnames(M6.tank.temp.means) <- c("Time", "Tank4.mean", "Tank4.se", "Tank5.mean", "Tank5.se")  #Rename columns to describe contents
Fig13 <- ggplot(M6.tank.temp.means, aes(Time)) + # plot mean temp by tank
geom_point(aes(y = Tank4.mean, colour="Ambient")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank4.mean+Tank4.se, ymin=Tank4.mean-Tank4.se), position=position_dodge(0.9), data=M6.tank.temp.means) + #set values for standard error bars and offset on the X axis for clarity
geom_point(aes(y = Tank5.mean, colour="High")) + #plot points
geom_errorbar(aes(x=Time, ymax=Tank5.mean+Tank5.se, ymin=Tank5.mean-Tank5.se), position=position_dodge(0.9), data=M6.tank.temp.means) + #set values for standard error bars and offset on the X axis for clarity
scale_colour_manual("Treatment", values = c("blue","red")) +
scale_x_discrete(breaks=c("01:00", "06:00", "12:00", "18:00", "23:00")) + #set discrete breaks on the X axis
ggtitle("D) Month 6 Larval Exposure") + #Label graphic title
ylim(23.5,29) + #Set Y axis limits
xlab("Time") + #Label the X Axis
ylab("Temperature (°C)") + #Label the Y Axis
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0), #Justify the title to the top left
legend.position='none') #remove legend background
Fig13 #View figure
#Tank Light Data for Larval Month 6 Exposure Period (12July - 25Aug14)
M6.tank.light.data <- read.csv("Month6_Tank_Light.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
M6.tank.light.data[M6.tank.light.data == 0] <- NA
mydate.tanks <- strptime(M6.tank.light.data$Date.Time, format="%m/%d/%y %H:%M") #convert date format to characters
M6.tank.light.data$Tank4.quanta <-(M6.tank.light.data$Tank4)/(15*60) #Assign light column in dataframe and convert to units of µmol m-2 s-1
M6.tank.light.data$Tank5.quanta <-(M6.tank.light.data$Tank5)/(15*60) #Assign light column in dataframe and convert to units of µmol m-2 s-1
M6.tank.light.data$Tank4.cal <-(M6.tank.light.data$Tank4.quanta*L4.lm[2])+L4.lm[1] #Apply the cross calibration of temperature to standard logger #1
M6.tank.light.data$Tank5.cal <-(M6.tank.light.data$Tank5.quanta*L5.lm[2])+L5.lm[1] #Apply the cross calibration of temperature to standard logger #1
M6.tank.lightdata <-data.frame(mydate.tanks, M6.tank.light.data$Tank4.cal, M6.tank.light.data$Tank5.cal) #make a dataframe of temperature and time
colnames(M6.tank.lightdata) <- c("Date.Time", "Tank4", "Tank5")
Tank4.M6.light.N <- sum(!is.na(M6.tank.lightdata$Tank4)) #Count sample size
Tank5.M6.light.N <- sum(!is.na(M6.tank.lightdata$Tank5)) #Count sample size
Fig14 <- ggplot(M6.tank.lightdata, aes(Date.Time)) + #plot tank light data
geom_line(aes(y = Tank4, colour="Ambient")) + #plot light data as a line on the Y axis with date as the X axis
geom_line(aes(y = Tank5, colour="High"))
Fig14 <- ggplot(M6.tank.lightdata, aes(Date.Time)) + #plot tank light data
geom_line(aes(y = Tank4, colour="Ambient")) + #plot light data as a line on the Y axis with date as the X axis
geom_line(aes(y = Tank5, colour="High")) + #plot light data as a line on the Y axis with date as the X axis
scale_colour_manual("Treatment", values = c("blue","red")) + #add colors for treatments
xlab("Date") + #Label the X Axis
ylab(bquote('Irradiance ('*mu~'mol' ~photons ~ m^-2~s^-1*')')) + #Label the Y Axis
ggtitle("") + #label the main title
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig14 #View figure
ggplot(M6.tank.lightdata, aes(Date.Time)) + #plot tank light data
geom_line(aes(y = Tank4, colour="Ambient")) + #plot light data as a line on the Y axis with date as the X axis
geom_line(aes(y = Tank5, colour="High"))
Fig14 <- ggplot(M6.tank.lightdata, aes(Date.Time)) + #plot tank light data
geom_line(aes(y = Tank4, colour="Ambient")) + #plot light data as a line on the Y axis with date as the X axis
geom_line(aes(y = Tank5, colour="High")) + #plot light data as a line on the Y axis with date as the X axis
scale_colour_manual("Treatment", values = c("blue","red")) + #add colors for treatments
xlab("Date") + #Label the X Axis
ylab(bquote('Irradiance ('*mu~'mol' ~photons ~ m^-2~s^-1*')')) + #Label the Y Axis
ggtitle("") + #label the main title
theme_bw() + #Set the background color
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #Set the text angle
axis.line = element_line(color = 'black'), #Set the axes color
panel.border = element_blank(), #Set the border
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background =element_blank(), #Set the plot background
legend.key = element_blank(), #Set plot legend key
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig14 #View figure
M6.tanks.L.mean <- mean(rbind(M6.tank.lightdata[,2], M6.tank.lightdata[,3]), na.rm=T) #Calculate the grand average of both tanks
M6.tanks.L.mean #View data
M6.tanks.L.se <- sd(rbind(M6.tank.lightdata[,2], M6.tank.lightdata[,3]), na.rm=T)/sqrt(Tank4.M6.light.N+Tank5.M6.light.N) #Calculate the overal standard error of both tanks
M6.tanks.L.se #View data
path <-("~/MyProjects/HI_Pdam_Parental/RAnalysis/Data/pH_Calibration_Files/")
#Examination of Parental Effects and Trans-generational Acclimatization in Pocillopora damicornis exposed to Ocean Acifiication
#Data published in X
#Title:
#Contact: Hollie Putnam hollieputnam@gmail.com
#Supported by: NSF Ocean Sciencs Postdoctoral Research Fellowship (NSF OCE PRF-1323822) and NSF EPSCOR (NSF EPS-0903833)
#last modified 20161002
#See Readme file for details on data files and metadata
rm(list=ls()) # removes all prior objects
#Read in required libraries
library(car) #version 2.0-21 Date: 2014/08/09 Title: Companion to Applied Regression Depends: R (>= 2.14.0), stats, graphics
library(ggplot2) #version 1.0.1 Date/Publication: 2015-03-17 Title: An Implementation of the Grammar of Graphics Depends: R (>= 2.14), stats, methods
library(gridExtra) #version: 0.9.1 Date/Publication: 2012-08-09 Title: functions in Grid graphics Depends: R(>= 2.5.0), grid
library(lsmeans)  #version: 2.17 Date: 2015-04-15 Title: Least-Squares Means Depends: estimability, methods, R (>= 3.0)
library(multcomp) #version: 1.4-0 Date: 2015-03-05 Title: Simultaneous Inference in General Parametric Models Depends: stats, graphics, mvtnorm (>= 0.8-0), survival (>= 2.35-7), TH.data (>= 1.0-2)
library(nlme) #version: 3.1-118 Date: 2014-10-07 Title: Linear and Nonlinear Mixed Effects Models Depends: graphics, stats, R (>= 3.0.0)
library(plotrix) #version: 3.5-7 Date: 2014-05-26 Title: Various plotting functions Depends:NA
library(plyr) #version: 1.8.1 Date/Publication: 2014-02-26 Title: Tools for splitting, applying and combining data Depends: R (>= 2.11.0)
library(reshape) #version: 0.8.5 Date/Publication: 2014-04-23 Title: Flexibly reshape data. Depends: R (>= 2.6.1)
library(seacarb) #version: 3.0 Date/Publication: 2014-04-05 Title: seawater carbonate chemistry with R Depends: NA
#Required Data files
#Light_Calibration_Data.csv
#Temperature_Calibration_Data.csv
#Field_Temp.csv
#Acclimation_Data.csv
#Adult_Tank_Temp.csv
#Adult_Tank_Light.csv
#Month1_Tank_Temp.csv
#Month1_Tank_Light.csv
#Month6_Tank_Temp.csv
#Month6_Tank_Light.csv
#~/MyProjects/HI_Pdam_Parental/RAnalysis/Data/pH_Calibration_Files/
#Daily_Temp_pH_Sal.csv
#TA_mass_data.csv
#CRM_TA_Data.csv
#june.larval.release.data.csv
#july.larval.release.data.csv
#august.larval.release.data.csv
#############################################################
setwd("~/MyProjects/HI_Pdam_Parental/RAnalysis/Data") #set working directory
mainDir<-'~/MyProjects/HI_Pdam_Parental/RAnalysis/' #set main directory
#############################################################
?ks.test
## Repeated Measures
RM.release.data <- read.csv("RM_Release_Data.csv", header=T, sep=",", na.string="NA", as.is=T) #read in data in long format
all.release.mean <- aggregate(Total.Release ~ Treatment + Time, data=RM.release.data, mean) #calculate mean by treatment and time
all.release.se <- aggregate(Total.Release ~ Treatment + Time, data=RM.release.data, std.error)  #calculate se by treatment and time
all.release <- cbind(all.release.mean, all.release.se$Total.Release) #make dataframe
colnames(all.release) <- c("Treatment", "Time", "mean", "se") #rename columns
Fig28 <- ggplot(all.release, aes(x=Time, y=mean, colour=Treatment, group=Treatment), position=position_dodge(width=0.5)) +
geom_errorbar(aes(ymin=all.release$mean - all.release$se, ymax=all.release$mean + all.release$se), colour="black", width=0, size = 0.4, position=position_dodge(width=0.5)) +
geom_point(position=position_dodge(width=0.5), size=2, shape=15) +
scale_colour_manual(values = c("gray","black")) +
scale_x_discrete(limits=c("June","July","August")) +
ylab(" Total Release") +
ylim(0,1700) +
ggtitle("D) Total") +
theme_bw() +
theme_bw() + #theme black and white
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #x axis text characteristics
panel.border = element_blank(), #remove border
panel.grid.major = element_blank(), #remove grids
panel.grid.minor = element_blank(), #remove grids
axis.line = element_line(colour = "black"), #axis line black
legend.title=element_blank(), #remove legend title
legend.position="none", #set legend position
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig28
?glm
## Repeated Measures
RM.release.data <- read.csv("RM_Release_Data.csv", header=T, sep=",", na.string="NA", as.is=T) #read in data in long format
all.release.mean <- aggregate(Total.Release ~ Treatment + Time, data=RM.release.data, mean) #calculate mean by treatment and time
all.release.se <- aggregate(Total.Release ~ Treatment + Time, data=RM.release.data, std.error)  #calculate se by treatment and time
all.release <- cbind(all.release.mean, all.release.se$Total.Release) #make dataframe
colnames(all.release) <- c("Treatment", "Time", "mean", "se") #rename columns
Fig28 <- ggplot(all.release, aes(x=Time, y=mean, colour=Treatment, group=Treatment), position=position_dodge(width=0.5)) +  #plot mean as a function of Time
geom_errorbar(aes(ymin=all.release$mean - all.release$se, ymax=all.release$mean + all.release$se), #plot error bars
colour="black", width=0, size = 0.4, # Width of the error bars
position=position_dodge(width=0.5)) + #set bar position
geom_point(position=position_dodge(width=0.5), size=2, shape=15) +
scale_colour_manual(values = c("gray","black")) + #set point fill color
scale_x_discrete(limits=c("June","July","August")) + #label x axis in order
ylab(" Total Release") + #y axis label
ylim(0,1700) + #y axis limits
ggtitle("D) Total") + #plot title
theme_bw() + #theme black and white
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #x axis text characteristics
panel.border = element_blank(), #remove border
panel.grid.major = element_blank(), #remove grids
panel.grid.minor = element_blank(), #remove grids
axis.line = element_line(colour = "black"), #axis line black
legend.title=element_blank(), #remove legend title
legend.position="none", #set legend position
plot.title=element_text(hjust=0)) #Justify the title to the top left
Fig28
#GLM release by treatment and time
RM.release.data #view data
RM.release.data <- na.omit(RM.release.data) #remove NA
Interaction <- glm(log10(Total.Release+1) ~ Treatment * Time, data=RM.release.data) #run generalized linear model
summary(Interaction)
release.resid <-resid(Interaction)
release.shapiro <- shapiro.test(release.resid) #runs a normality test using shapiro-wilk test on the residuals
release.shapiro
release.qqnorm <- qqnorm(release.resid) # normal quantile plot
release.qqline <- qqline(release.resid) # adding a qline of comparison
hist(release.resid)
summary(Interaction)
release.shapiro
hist(release.resid)
release.resid
plot(Interaction$residuals, Interaction$fitted.values)
plot(Interaction$fitted.values, Interaction$residuals)
Interaction$residuals, Interaction$fitted.values
plot(Interaction$fitted.values, Interaction$residuals)
summary(Interaction)
release.posthoc <- lsmeans(RM.release.data, specs=c("Treatment","Time")) #calculate MS means
release.posthoc #view results
release.posthoc.p <- contrast(release.posthoc, method="pairwise", by=c("Time")) #contrast treatment groups within a species at each time point
release.posthoc.p #view results
release.posthoc.lett <- cld(release.posthoc , alpha=.05, Letters=letters) #identify posthoc letter differences
release.posthoc.lett #view results
release.posthoc <- lsmeans(Interaction, specs=c("Treatment","Time")) #calculate MS means
release.posthoc #view results
release.posthoc.p <- contrast(release.posthoc, method="pairwise", by=c("Time")) #contrast treatment groups within a species at each time point
release.posthoc.p #view results
release.posthoc.lett <- cld(release.posthoc , alpha=.05, Letters=letters) #identify posthoc letter differences
release.posthoc.lett #view results
release.posthoc <- lsmeans(Interaction, specs=c("Time")) #calculate MS means
release.posthoc #view results
release.posthoc.p <- contrast(release.posthoc, method="pairwise", by=c("Time")) #contrast treatment groups within a species at each time point
release.posthoc.p #view results
release.posthoc.p <- contrast(release.posthoc, method="pairwise") #contrast treatment groups within a species at each time point
release.posthoc.p #view results
release.posthoc.lett <- cld(release.posthoc , alpha=.05, Letters=letters) #identify posthoc letter differences
release.posthoc.lett #view results
larval.data.M0 <- read.csv("Larval_Data_M0.csv", header=T, sep=",", na.string="NA", as.is=T) #load data
proportion.alive.M0 <- (larval.data.M0$Plastic + larval.data.M0$Top.Tile + larval.data.M0$Bottom.Tile +  larval.data.M0$Edge +	larval.data.M0$Swimming)/larval.data.M0$larvae.added #calculate survivorship
proportion.dead.M0 <- 1-proportion.alive.M0 #calculate mortality
survive.M0 <- data.frame (larval.data.M0$Chamber.num, larval.data.M0$Timepoint, larval.data.M0$Origin, larval.data.M0$Secondary, proportion.alive.M0) #make dataframe
colnames(survive.M0) <- c("Chamber", "Timepoint", "Origin", "Secondary", "Alive") #rename columns
mean.survive.M0 <- aggregate(Alive ~ Origin * Secondary, data = survive.M0, FUN= "mean") #calculate mean
se.survive.M0 <- aggregate(Alive ~ Origin * Secondary, data = survive.M0, FUN= "std.error")
survivorship.M0 <- cbind(mean.survive.M0,se.survive.M0$Alive)
colnames(survivorship.M0) <- c("Origin", "Secondary", "mean", "se")
Fig29 <- ggplot(data=survivorship.M0, aes(x=factor(Secondary), y=mean, group=Origin, colour=Origin, shape=Origin)) +
geom_line(size=0.7, position=position_dodge(.1)) + #plot lines
scale_colour_manual(values=c("gray", "black")) + #set line color
geom_point(size=3, position=position_dodge(.1), colour="black") + #set point characteristics
scale_shape_manual(values=c(1,18)) + #set shapes
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), #plot error bars
width=0, position=position_dodge(.1), colour="black") + #set error bar characteristics
ggtitle("A)") + #plot title
ylab("Survivorship") + #Y axis label
ylim(0,1) + #Y axis limits
theme_bw() + #theme black and white
theme(axis.title.x=element_blank(), #x axis text characteristics
panel.border = element_blank(), #remove border
panel.grid.major = element_blank(), #remove grids
panel.grid.minor = element_blank(), #remove grids
plot.background =element_blank(), #Set the plot background
axis.line = element_line(colour = "black"), #axis line black
legend.title=element_blank(), #remove legend title
legend.position="none", #set legend position
plot.title=element_text(hjust=0), #Justify the title to the top left
legend.text = element_text(size = 8), #set legend text size
legend.key = element_blank()) #Set plot legend key
Fig29 #view plot
dev.off()
Fig29 <- ggplot(data=survivorship.M0, aes(x=factor(Secondary), y=mean, group=Origin, colour=Origin, shape=Origin)) +
geom_line(size=0.7, position=position_dodge(.1)) + #plot lines
scale_colour_manual(values=c("gray", "black")) + #set line color
geom_point(size=3, position=position_dodge(.1), colour="black") + #set point characteristics
scale_shape_manual(values=c(1,18)) + #set shapes
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), #plot error bars
width=0, position=position_dodge(.1), colour="black") + #set error bar characteristics
ggtitle("A)") + #plot title
ylab("Survivorship") + #Y axis label
ylim(0,1) + #Y axis limits
theme_bw() + #theme black and white
theme(axis.title.x=element_blank(), #x axis text characteristics
panel.border = element_blank(), #remove border
panel.grid.major = element_blank(), #remove grids
panel.grid.minor = element_blank(), #remove grids
plot.background =element_blank(), #Set the plot background
axis.line = element_line(colour = "black"), #axis line black
legend.title=element_blank(), #remove legend title
legend.position="none", #set legend position
plot.title=element_text(hjust=0), #Justify the title to the top left
legend.text = element_text(size = 8), #set legend text size
legend.key = element_blank()) #Set plot legend key
Fig29 #view plot
ggplot(data=survivorship.M0, aes(x=factor(Secondary), y=mean, group=Origin, colour=Origin, shape=Origin)) +
geom_line(size=0.7, position=position_dodge(.1))
