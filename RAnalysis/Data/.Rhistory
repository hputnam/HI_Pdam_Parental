set.GLM.posthoc.lett #view results
##### GROWTH #####
data.M1 <- read.csv("Month1_Larval_Size.csv", header=T, sep=",", na.string="NA", as.is=T) #load data
data.M6 <- read.csv("Month6_Larval_Size.csv", header=T, sep=",", na.string="NA", as.is=T) #load data
growth.M1 <- aggregate(Polyp.Num.M1 ~ Date.M1 + Chamber.num, data = data.M1, FUN= "mean") #calculate size and survivorship per tile
growth.M6 <- aggregate(Polyp.Num.M6 ~ Date.M6 + Chamber.num, data = data.M6, FUN= "mean") #calculate size and survivorship per tile
growth.M6[growth.M6 == 0] <- NA #set zeros equal to NA
growth <- (cbind(growth.M1,growth.M6$Polyp.Num.M6, larval.data.M0$Origin, larval.data.M0$Secondary,larval.data.M0$Date, growth.M6$Date.M6)) #make dataframe
colnames(growth) <- c("Date.M1",  "Chamber.num",	"Polyp.Num.M1", "Polyp.Num.M6",	"Origin",	"Secondary",	"Date.M0", "Date.M6") #rename columns
growth$Date.M0<- as.Date(growth$Date.M0,format="%m/%d/%y") #set as date
growth$Date.M1<- as.Date(growth$Date.M1,format="%m/%d/%y") #set as date
growth$Date.M6<- as.Date(growth$Date.M6,format="%m/%d/%y") #set as date
growth$Days.M1 <- difftime(growth$Date.M1, growth$Date.M0, units = c("days")) #calculate the time difference in days
growth$Days.M6 <- difftime(growth$Date.M6, growth$Date.M1, units = c("days")) #calculate the time difference in days
growth$growth.rate.M1 <- (growth$Polyp.Num.M1-1)/(as.numeric(growth$Days.M1)) #calculate growth rate per day
growth$growth.rate.M6 <- (growth$Polyp.Num.M6-growth$Polyp.Num.M1)/(as.numeric(growth$Days.M6)) #calculate growth rate per day
m1.mean.growth <- aggregate(growth.rate.M1 ~ Origin + Secondary, data = growth, FUN= "mean") #calculate mean by origin and secondary treatments
m1.se.growth <- aggregate(growth.rate.M1 ~ Origin + Secondary, data = growth, FUN= "std.error") #calculate se by origin and secondary treatments
m1.n.growth <- aggregate(growth.rate.M1 ~ Origin + Secondary, data = growth, FUN= "length") #calculate se by origin and secondary treatments
m1.growth <- cbind(m1.mean.growth,m1.se.growth$growth.rate.M1) #combine data
colnames(m1.growth) <- c("Origin", "Secondary", "mean", "se") #rename columns
m6.mean.growth <- aggregate(growth.rate.M6 ~ Origin + Secondary, data = growth, FUN= "mean") #calculate mean by origin and secondary treatments
m6.se.growth <- aggregate(growth.rate.M6 ~ Origin + Secondary, data = growth, FUN= "std.error") #calculate se by origin and secondary treatments
m6.n.growth <- aggregate(growth.rate.M6 ~ Origin + Secondary, data = growth, FUN= "length") #calculate se by origin and secondary treatments
m6.growth <- cbind(m6.mean.growth,m6.se.growth$growth.rate.M6) #combine data
colnames(m6.growth) <- c("Origin", "Secondary", "mean", "se") #rename columns
Fig30 <- ggplot(data=m1.growth, aes(x=factor(Secondary), y=mean, group=Origin, colour=Origin, shape=Origin)) + #plot data
geom_line(size=0.7, position=position_dodge(.1)) + #plot lines
scale_colour_manual(values=c("gray", "black")) + #set line color
geom_point(size=4, position=position_dodge(.1), colour="black") + #set point characteristics
scale_shape_manual(values=c(1,18)) + #set shapes
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), #plot error bars
width=0, position=position_dodge(.1), colour="black") + #set error bar characteristics
ggtitle("E)") + #plot title
xlab("Treatment of Offspring") + #plot x axis label
ylab(expression(bold(~Growth~~"(polyps "*d^"1"*")"))) + #plot y axis label
ylim(0,0.1) + #Y axis limits
theme_bw() + #theme black and white
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.text=element_text(size=16), #set text size
axis.title=element_text(size=18,face="bold"), #set axis title text size
strip.text.x = element_text(size = 16, colour = "black", face="bold"),
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
axis.text.x=element_text(angle=0), #set text angle
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background=element_blank(),  #Set the plot background
legend.key = element_blank(),  #remove legend background
legend.position="none",  #set legend location
plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) #set title attributes
Fig30
Fig31 <- ggplot(data=m6.growth, aes(x=factor(Secondary), y=mean, group=Origin, colour=Origin, shape=Origin)) + #plot data
geom_line(size=0.7, position=position_dodge(.1)) + #plot lines
scale_colour_manual(values=c("gray", "black")) + #set line color
geom_point(size=4, position=position_dodge(.1), colour="black") + #set point characteristics
scale_shape_manual(values=c(1,18)) + #set shapes
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), #plot error bars
width=0, position=position_dodge(.1), colour="black") +  #set error bar characteristics
ggtitle("F)") +  #plot title
xlab("Treatment of Offspring") + #plot x axis label
ylab(expression(bold(~Growth~~"(polyps "*d^"1"*")"))) + #plot y axis label
ylim(0,0.1) + #Y axis limits
theme_bw() + #theme black and white
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.text=element_text(size=16), #set text size
axis.title=element_text(size=18,face="bold"), #set axis title text size
strip.text.x = element_text(size = 16, colour = "black", face="bold"),
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
axis.text.x=element_text(angle=0), #set text angle
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background=element_blank(),  #Set the plot background
legend.key = element_blank(),  #remove legend background
legend.position="none",  #set legend location
plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) #set title attributes
Fig31
#Repeated Measures growth
grow.M1<- cbind.data.frame(growth$Chamber.num, growth$Origin, growth$Secondary, growth$growth.rate.M1) #combine data
grow.M1$Timepoint <- "Time1" #identify time points
colnames(grow.M1) <- c( "Chamber.num", "Origin", "Secondary", "growth.rate", "Timepoint") #rename columns
grow.M6<- cbind.data.frame(growth$Chamber.num, growth$Origin, growth$Secondary, growth$growth.rate.M6) #combine data
grow.M6$Timepoint <- "Time6" #identify time points
colnames(grow.M6) <- c( "Chamber.num", "Origin", "Secondary", "growth.rate", "Timepoint") #rename columns
All.Growth <- rbind(grow.M1, grow.M6) #combine data
All.Growth <- na.omit(All.Growth) #remove NA rows
Growth.RM <- lme(log10(growth.rate+1) ~ Origin*Secondary*Timepoint, random = ~ 1|Chamber.num/Timepoint, data=All.Growth) #repeated measures ANOVA
summary(Growth.RM) #view results
Grow.Results <- summary(Growth.RM) #view results
anova(Growth.RM) #view results
gro.resid <-resid(Growth.RM) #extract residuals
gro.shapiro <- shapiro.test(gro.resid) #runs a normality test using shapiro-wilk test on the residuals
gro.shapiro #view results
gro.qqnorm <- qqnorm(gro.resid) # normal quantile plot
gro.qqline <- qqline(gro.resid) # adding a qline of comparison
hist(gro.resid) #plot histogram of residuals
boxplot(gro.resid~ All.Growth$Origin * All.Growth$Secondary* All.Growth$Timepoint, ylab = "residuals", las = 2, par(mar = c(12, 5, 4, 2)+ 0.1)) #view Origin variability
Growth.posthoc <- lsmeans(Growth.RM , specs=c("Timepoint","Origin","Secondary")) #calculate MS means
Growth.posthoc #view results
Growth.posthoc.p <- contrast(Growth.posthoc, method="pairwise", by=c("Timepoint")) #contrast treatment groups within a species at each time point
Growth.posthoc.p #view results
Growth.posthoc.lett <- cld(Growth.posthoc , alpha=.05, Letters=letters) #identify posthoc letter differences
Growth.posthoc.lett #view results
#transform and calculate descriptive stats
All.Growth$logged <- log10(All.Growth$growth.rate +1)
mean.growth <- aggregate(logged ~ Origin + Secondary + Timepoint, data = All.Growth, FUN= "mean") #calculate mean by origin and secondary treatments
se.growth <- aggregate(logged ~ Origin + Secondary + Timepoint, data = All.Growth, FUN= "std.error") #calculate se by origin and secondary treatments
growth <- cbind(mean.growth,se.growth$logged) #combine data
m1.growth <- subset(growth, Timepoint=="Time1")
colnames(m1.growth) <- c("Origin", "Secondary","Timepoint", "mean", "se") #rename columns
m6.growth <- subset(growth, Timepoint=="Time6")
colnames(m6.growth) <- c("Origin", "Secondary","Timepoint", "mean", "se") #rename columns
#backtransform means and asymetrical error
m1.growth.bt <- m1.growth #assign data
m1.growth.bt$mean <- 10^(m1.growth.bt$mean)-1 #backtransform
m1.growth.bt$upper <- m1.growth$mean + m1.growth$se #upper sem value
m1.growth.bt$lower <- m1.growth$mean - m1.growth$se #lower sem value
m1.growth.bt$upper.bt <- 10^(m1.growth.bt$upper)-1 #backtransform
m1.growth.bt$lower.bt <- 10^(m1.growth.bt$lower)-1 #backtransform
#descriptive stats
g1 <-m1.growth.bt[2,4]/m1.growth.bt[1,4] #fold change between treatments
g2 <-m1.growth.bt[4,4]/m1.growth.bt[3,4] #fold change between treatments
mean(g1,g2)
Fig32 <- ggplot(data=m1.growth.bt, aes(x=factor(Secondary), y=mean, group=Origin, colour=Origin, shape=Origin)) + #plot data
geom_line(size=0.7, position=position_dodge(.1)) + #plot lines
scale_colour_manual(values=c("gray", "black")) + #set line color
geom_point(size=4, position=position_dodge(.1), colour="black") + #set point characteristics
scale_shape_manual(values=c(1,18)) + #set shapes
geom_errorbar(aes(ymin=lower.bt, ymax=upper.bt), #plot error bars
width=0, position=position_dodge(.1), colour="black") + #set error bar characteristics
ggtitle("E)") + #plot title
xlab("Treatment of Offspring") + #plot x axis label
ylab(expression(bold(~Growth~~"(polyps "*d^"1"*")"))) + #plot y axis label
ylim(0,0.1) + #Y axis limits
theme_bw() + #theme black and white
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.text=element_text(size=16), #set text size
axis.title=element_text(size=18,face="bold"), #set axis title text size
strip.text.x = element_text(size = 16, colour = "black", face="bold"),
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
axis.text.x=element_text(angle=0), #set text angle
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background=element_blank(),  #Set the plot background
legend.key = element_blank(),  #remove legend background
legend.position="none",  #set legend location
plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) #set title attributes
Fig32
#backtransform means and asymetrical error
m6.growth.bt <- m6.growth #assign data
m6.growth.bt$mean <- 10^(m6.growth.bt$mean)-1 #backtransform
m6.growth.bt$upper <- m6.growth$mean + m6.growth$se #upper sem value
m6.growth.bt$lower <- m6.growth$mean - m6.growth$se #lower sem value
m6.growth.bt$upper.bt <- 10^(m6.growth.bt$upper)-1 #backtransform
m6.growth.bt$lower.bt <- 10^(m6.growth.bt$lower)-1 #backtransform
Fig33 <- ggplot(data=m6.growth.bt, aes(x=factor(Secondary), y=mean, group=Origin, colour=Origin, shape=Origin)) + #plot data
geom_line(size=0.7, position=position_dodge(.1)) + #plot lines
scale_colour_manual(values=c("gray", "black")) + #set line color
geom_point(size=4, position=position_dodge(.1), colour="black") + #set point characteristics
scale_shape_manual(values=c(1,18)) + #set shapes
geom_errorbar(aes(ymin=lower.bt, ymax=upper.bt), #plot error bars
width=0, position=position_dodge(.1), colour="black") +  #set error bar characteristics
ggtitle("F)") +  #plot title
xlab("Treatment of Offspring") + #plot x axis label
ylab(expression(bold(~Growth~~"(polyps "*d^"1"*")"))) + #plot y axis label
ylim(0,0.1) + #Y axis limits
theme_bw() + #theme black and white
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.text=element_text(size=16), #set text size
axis.title=element_text(size=18,face="bold"), #set axis title text size
strip.text.x = element_text(size = 16, colour = "black", face="bold"),
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
axis.text.x=element_text(angle=0), #set text angle
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background=element_blank(),  #Set the plot background
legend.key = element_blank(),  #remove legend background
legend.position="none",  #set legend location
plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) #set title attributes
Fig33
pdf("Fig2.Larval.release.pdf", width = 11, height = 6)
inset <- viewport(width = 0.22, height = 0.5, x = 0.86, y = 0.65)  # the inset in upper right
grid.newpage()
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
pushViewport(viewport(layout = grid.layout(1, 3)))
print(Fig22, vp = vplayout(1, 1))
print(Fig23, vp = vplayout(1, 2))
print(Fig24, vp = vplayout(1, 3))
dev.off()
pdf("Fig3.Larval.Performance.pdf", width = 11, height = 6)
grid.newpage()
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
pushViewport(viewport(layout = grid.layout(2, 3)))
print(Fig29, vp = vplayout(1, 1))
print(Fig30, vp = vplayout(1, 2))
print(Fig31, vp = vplayout(1, 3))
print(Fig32, vp = vplayout(2, 1))
print(Fig33, vp = vplayout(2, 2))
print(Fig34, vp = vplayout(2, 3))
dev.off()
Fig29
Fig30
Fig31
Larval.Perform <- arrangeGrob(Fig26, Fig27, Fig28,
Fig29, Fig32, Fig33, ncol=3)
ggsave(file="Fig3.Larval.Performance.pdf", Larval.Perform, width =12, height = 6, units = c("in"))
setwd(file.path(mainDir, 'Output'))
#Capture Figures to File
pdf("Fig2.Larval.release.pdf", width = 11, height = 6)
inset <- viewport(width = 0.22, height = 0.5, x = 0.86, y = 0.65)  # the inset in upper right
grid.newpage()
vplayout <- function(x, y) viewport(layout.pos.row = x, layout.pos.col = y)
pushViewport(viewport(layout = grid.layout(1, 3)))
print(Fig22, vp = vplayout(1, 1))
print(Fig23, vp = vplayout(1, 2))
print(Fig24, vp = vplayout(1, 3))
dev.off()
Larval.Perform <- arrangeGrob(Fig26, Fig27, Fig28,
Fig29, Fig32, Fig33, ncol=3)
ggsave(file="Fig3.Larval.Performance.pdf", Larval.Perform, width =12, height = 6, units = c("in"))
FigureS1.Physical <- grid.arrange(arrangeGrob(Fig2, Fig5, Fig9, Fig13, left="TEMPERATURE", ncol=4),
arrangeGrob(Fig3, Fig7, Fig11, Fig15, left="IRRADIANCE", ncol=4),
arrangeGrob(FigMT, Fig17, Fig19, Fig21, left="pH", ncol=4), ncol=1)
ggsave(file="FigS1.Physical_Experimental_Conditions.pdf", FigureS1.Physical, width =11, height = 8.5, units = c("in"))
write.table(adult.chem.table, "Seawater_chemistry_table_Output_Adult.csv", sep=",", row.names = FALSE)
write.table(M1.chem.table, "Seawater_chemistry_table_Output_M1.csv", sep=",", row.names = FALSE)
write.table(M6.chem.table, "Seawater_chemistry_table_Output_M6.csv", sep=",", row.names = FALSE)
tt2 <- ttheme_minimal()
title1 <- "A) Adult Exposure"
title2 <- "B) Month 1 Exposure"
title3 <- "C) Month 6 Exposure"
t1 <- grid.text(title1, just="left")
t2 <- grid.text(title2, just="left")
t3 <- grid.text(title3, just="left")
SW.Chem.Tables <- grid.arrange(
t1,
tableGrob(adult.chem.table, theme=tt2),
t2,
tableGrob(M1.chem.table, theme=tt2),
t3,
tableGrob(M6.chem.table, theme=tt2),
nrow=6)
ggsave(file="SW.Chemistry.Table.pdf", SW.Chem.Tables, width = 11, height = 6)
### Generate Stats Table
survivorship <- as.data.frame(Sur.Results$coefficients)
survivorship <-round(survivorship[,],3)
survivorship
settlement <- as.data.frame(Set.Results$coefficients)
settlement <-round(settlement[,],3)
settlement
growth <- anova(Growth.RM)
growth <-round(growth[,],3)
growth
# pdf("table2.pdf", width = 11, height = 6, nrow=3)
# sur.table <- grid.table(survivorship)
# set.table <- grid.table(settlement)
# gro.table <- grid.table(growth)
# dev.off()
#Capture statistical results to file
capture.output(june.ks, july.ks, august.ks, survivorship, settlement, growth,  file="HI_Pdam_Parental_Stat_Results.txt")
setwd(file.path(mainDir, 'Data'))
source('~/MyProjects/HI_Pdam_Parental/RAnalysis/Scripts/HI_Pdam_Parental_Effects.R')
setwd(file.path(mainDir, 'Data'))
massfile<-"TA_mass_data.csv" # name of your file with masses
path<-"~/MyProjects/HI_Pdam_Parental/RAnalysis/Data/TA" #the location of all your titration files
Sample.Info <- read.csv("TA_mass_data.csv", header=T, sep=",", na.string="NA", as.is=T) #load data
Mass<-read.csv(massfile, header=T, sep=",", na.string="NA", as.is=T, row.names=1)  #load Sample Info Data
# Select the mV for pH=3 and pH=3.5 based on probe calibration
pH35<-mean(Sample.Info$pH35, na.rm=T) #take the average mV reading for pH 3.5 across all samples
pH3<-mean(Sample.Info$pH3, na.rm=T) #take the average mV reading for pH 3.0 across all samples
#find all the titration data files
file.names<-list.files(path=path) #list all the file names in your data and sample directory
file.names <- file.names[grep("[.]csv", file.names)] # select only get the csv files
#create an empty dataframe to put the TA values in
nrow<-length(file.names) #set number of rows to the number of samples
TA <- matrix(nrow = nrow, ncol = 3) #set the dimensions of the dataframe
rownames(TA)<-file.names #identify row names
colnames(TA)<-c('Sample.ID','Mass','TA.Mes') #identify column names
setwd(file.path(mainDir, 'Data/TA')) # set working directory to where the data are
#run a for loop to bring in the titration files on at a time and calculate TA
for(i in 1: length(file.names)) {
Data<-read.table(file.names[i], header=F, sep=",", na.string="NA",as.is=T) #read in each data file
Data<-Data[-1:-6,] #remove the rows with characters
# everything was brought in as a character because of the second line, converts back to numeric
Data$Temperature<-as.numeric(Data[,7]) #convert to numeric and assign temperature column
Data$Signal<-as.numeric(Data[,3]) #convert to numeric and assign mV column
Data$Volume<-as.numeric(Data[,1]) #convert to numeric and assign volumn of titrant column
#name of the file without .csv
name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
#identifies the indices of values between pH 3 and 3.5
mV<-which(Data$Signal<pH3 & Data$Signal>pH35)
#density of your titrant: specific to each bottle
d1<-100*(-0.00000331*mean(Data$Temperature[mV], na.rm=T)^2-0.0001401*mean(Data$Temperature[mV], na.rm=T)+1.02933)/1000
d2<-100*(-0.00000350*mean(Data$Temperature[mV], na.rm=T)^2-0.0001319*mean(Data$Temperature[mV], na.rm=T)+1.02907)/1000
d3<-100*(-0.00000379*mean(Data$Temperature[mV], na.rm=T)^2-0.00012043*mean(Data$Temperature[mV], na.rm=T)+1.0296876)/1000
d <- if(Mass[name,4] =="d1") {
d1                              #if density function = d1 use d1
} else if(Mass[name,4] =="d2") {
d2                              #if density function = d2 use d2
} else if(Mass[name,4] =="d3")
d3                              #if density function = d3 use d3
#concentration of your titrant: specific to each bottle
c<-Mass[name,3]
#Salinity of your samples: changed with every sample
s<-Mass[name,2]
#mass of sample in g: changed with every sample
mass<-Mass[name,1]
#Calculate TA
#at function is based on code in saecarb package by Steeve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-name #add sample name to data output
TA[i,2]<-mass #add mass to data output
TA[i,3]<-10000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$Signal[mV], volume=Data$Volume[mV]) #add TA to data output
}
TA <- data.frame(TA) #make a dataframe from the TA results
setwd(file.path(mainDir, 'Data'))
massfile<-"TA_mass_data.csv" # name of your file with masses
path<-"~/MyProjects/HI_Pdam_Parental/RAnalysis/Data/TA" #the location of all your titration files
Sample.Info <- read.csv("TA_mass_data.csv", header=T, sep=",", na.string="NA", as.is=T) #load data
Mass<-read.csv(massfile, header=T, sep=",", na.string="NA", as.is=T, row.names=1)  #load Sample Info Data
# Select the mV for pH=3 and pH=3.5 based on probe calibration
pH35<-mean(Sample.Info$pH35, na.rm=T) #take the average mV reading for pH 3.5 across all samples
pH3<-mean(Sample.Info$pH3, na.rm=T) #take the average mV reading for pH 3.0 across all samples
#find all the titration data files
file.names<-list.files(path=path) #list all the file names in your data and sample directory
file.names <- file.names[grep("[.]csv", file.names)] # select only get the csv files
#create an empty dataframe to put the TA values in
nrow<-length(file.names) #set number of rows to the number of samples
TA <- matrix(nrow = nrow, ncol = 3) #set the dimensions of the dataframe
rownames(TA)<-file.names #identify row names
colnames(TA)<-c('Sample.ID','Mass','TA.Mes') #identify column names
setwd(file.path(mainDir, 'Data/TA')) # set working directory to where the data are
for(i in 1: length(file.names)) {
Data<-read.table(file.names[i], header=F, sep=",", na.string="NA",as.is=T) #read in each data file
Data<-Data[-1:-6,] #remove the rows with characters
# everything was brought in as a character because of the second line, converts back to numeric
Data$Temperature<-as.numeric(Data[,7]) #convert to numeric and assign temperature column
Data$Signal<-as.numeric(Data[,3]) #convert to numeric and assign mV column
Data$Volume<-as.numeric(Data[,1]) #convert to numeric and assign volumn of titrant column
#name of the file without .csv
name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
#identifies the indices of values between pH 3 and 3.5
mV<-which(Data$Signal<pH3 & Data$Signal>pH35)
#density of your titrant: specific to each bottle
d1<-100*(-0.00000331*mean(Data$Temperature[mV], na.rm=T)^2-0.0001401*mean(Data$Temperature[mV], na.rm=T)+1.02933)/1000
d2<-100*(-0.00000350*mean(Data$Temperature[mV], na.rm=T)^2-0.0001319*mean(Data$Temperature[mV], na.rm=T)+1.02907)/1000
d3<-100*(-0.00000379*mean(Data$Temperature[mV], na.rm=T)^2-0.00012043*mean(Data$Temperature[mV], na.rm=T)+1.0296876)/1000
d <- if(Mass[name,4] =="d1") {
d1                              #if density function = d1 use d1
} else if(Mass[name,4] =="d2") {
d2                              #if density function = d2 use d2
} else if(Mass[name,4] =="d3")
d3                              #if density function = d3 use d3
#concentration of your titrant: specific to each bottle
c<-Mass[name,3]
#Salinity of your samples: changed with every sample
s<-Mass[name,2]
#mass of sample in g: changed with every sample
mass<-Mass[name,1]
#Calculate TA
#at function is based on code in saecarb package by Steeve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-name #add sample name to data output
TA[i,2]<-mass #add mass to data output
TA[i,3]<-10000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$Signal[mV], volume=Data$Volume[mV]) #add TA to data output
}
i=1
Data<-read.table(file.names[i], header=F, sep=",", na.string="NA",as.is=T) #read in each data file
Data<-Data[-1:-6,] #remove the rows with characters
Data$Temperature<-as.numeric(Data[,7]) #convert to numeric and assign temperature column
Data$Signal<-as.numeric(Data[,3]) #convert to numeric and assign mV column
Data$Volume<-as.numeric(Data[,1]) #convert to numeric and assign volumn of titrant column
#name of the file without .csv
name<-unlist(strsplit(file.names[i], split='.', fixed=TRUE))[1]
#identifies the indices of values between pH 3 and 3.5
mV<-which(Data$Signal<pH3 & Data$Signal>pH35)
#density of your titrant: specific to each bottle
d1<-100*(-0.00000331*mean(Data$Temperature[mV], na.rm=T)^2-0.0001401*mean(Data$Temperature[mV], na.rm=T)+1.02933)/1000
d2<-100*(-0.00000350*mean(Data$Temperature[mV], na.rm=T)^2-0.0001319*mean(Data$Temperature[mV], na.rm=T)+1.02907)/1000
d3<-100*(-0.00000379*mean(Data$Temperature[mV], na.rm=T)^2-0.00012043*mean(Data$Temperature[mV], na.rm=T)+1.0296876)/1000
d <- if(Mass[name,4] =="d1") {
d1                              #if density function = d1 use d1
} else if(Mass[name,4] =="d2") {
d2                              #if density function = d2 use d2
} else if(Mass[name,4] =="d3")
d3                              #if density function = d3 use d3
#concentration of your titrant: specific to each bottle
c<-Mass[name,3]
#mass of sample in g: changed with every sample
mass<-Mass[name,1]
#Calculate TA
#at function is based on code in saecarb package by Steeve Comeau, Heloise Lavigne and Jean-Pierre Gattuso
TA[i,1]<-name #add sample name to data output
TA[i,2]<-mass #add mass to data output
TA[i,3]<-10000000*at(S=s,T=mean(Data$Temperature[mV], na.rm=T), C=c, d=d, pHTris=NULL, ETris=NULL, weight=mass, E=Data$Signal[mV], volume=Data$Volume[mV]) #add TA to data output
TA <- data.frame(TA) #make a dataframe from the TA results
View(TA)
source('~/MyProjects/HI_Pdam_Parental/RAnalysis/Scripts/HI_Pdam_Parental_Effects.R')
source('~/MyProjects/HI_Pdam_Parental/RAnalysis/Scripts/HI_Pdam_Parental_Effects.R')
drop1(sur.GLM, test="Chi") #Compute all the single terms in the scope argument that can be added to or dropped from the model
summary(sur.GLM) #view summary
drop0(sur.GLM)
drop0(sur.GLM, test="Chi")
drop1(sur.GLM, test="Chi")
drop2(sur.GLM, test="Chi")
drop1(sur.GLM, test="Chi")
sur.GLM <-  glmer(cbind(Alive, Dead) ~ Origin*Secondary+Timepoint +(1|Chamber/Timepoint), data=All.Survivorship, family="binomial") #repeated measures ANOVA
summary(sur.GLM) #view summary
drop1(sur.GLM, test="Chi")
sur.GLM <-  glmer(cbind(Alive, Dead) ~ Origin+Secondary+Timepoint +(1|Chamber/Timepoint), data=All.Survivorship, family="binomial") #repeated measures ANOVA
summary(sur.GLM) #view summary
drop1(sur.GLM, test="Chi")
sur.GLM <-  glmer(cbind(Alive, Dead) ~ Origin*Secondary*Timepoint +(1|Chamber/Timepoint), data=All.Survivorship, family="binomial") #repeated measures ANOVA
summary(sur.GLM) #view summary
dredge(sur.GLM)
MuMIn::dredge(sur.GLM)
?dredge
sur.GLM <-  glmer(cbind(Alive, Dead) ~ Origin*Secondary*Timepoint +(1|Chamber/Timepoint), data=All.Survivorship, family="binomial", na.action="na.omit") #repeated measures ANOVA
summary(sur.GLM) #view summary
MuMIn::dredge(sur.GLM)
sur.GLM <-  glmer(cbind(Alive, Dead) ~ Origin*Secondary*Timepoint +(1|Chamber/Timepoint), data=All.Survivorship, family="binomial") #repeated measures ANOVA
summary(sur.GLM)
View(All.Survivorship)
unique(All.Survivorship)
unique(All.Survivorship$Timepoint)
unique(All.Survivorship$Origin)
unique(All.Survivorship$Secondayr)
unique(All.Survivorship$Secondary)
library(MuMIn)
dredge(sur.GLM)
sur.GLM
unique(All.Survivorship$Chamber)
sur.GLM <-  glmer(cbind(Alive, Dead) ~ Origin*Secondary*Timepoint +(1|Chamber/Timepoint), data=All.Survivorship, family="binomial", na.action = "na.fail") #repeated measures ANOVA
summary(sur.GLM) #view summary
dredge(sur.GLM)
.452/.182
?dredge
set.GLM <-  glmer(cbind(Settle, Not.Settle) ~ Origin*Secondary +(1|Chamber), data=settlement, family="binomial", na.action = "na.fail") #repeated measures ANOVA with random intercept but not slope
summary(set.GLM) #view summary
dredge(set.GLM) #describe model selection
set.GLM <-  glmer(cbind(Settle, Not.Settle) ~ Origin*Secondary +(1|Chamber), data=settlement, family="binomial", na.action = "na.fail") #repeated measures ANOVA with random intercept but not slope
#Timepoint 1 only
settlement.data <- larval.data.M0
settle <- (settlement.data$Plastic + settlement.data$Top.Tile + settlement.data$Bottom.Tile +  settlement.data$Edge)/(settlement.data$larvae.added)
settlement <- data.frame(settlement.data$Chamber.num, settlement.data$Origin, settlement.data$Secondary, settle)
colnames(settlement) <- c("Chamber", "Origin", "Secondary", "Prop.Settled") #rename columns
settlement$Settle <- (settlement.data$Plastic + settlement.data$Top.Tile + settlement.data$Bottom.Tile +  settlement.data$Edge) #count settlers
settlement$Not.Settle <- settlement.data$larvae.added-(settlement.data$Plastic + settlement.data$Top.Tile + settlement.data$Bottom.Tile +  settlement.data$Edge) #calculate not settled
mean.settled <- aggregate(Prop.Settled ~ Origin + Secondary, data = settlement, FUN= "mean") #calculate mean
se.settled <- aggregate(Prop.Settled ~ Origin + Secondary, data = settlement, FUN= "std.error") #calculate se
n.settled <- aggregate(Prop.Settled ~ Origin + Secondary, data = settlement, FUN= "length") #calculate se
settlement.data <- cbind(mean.settled, se.settled$Prop.Settled) #make dataframe
colnames(settlement.data) <- c("Origin", "Secondary", "mean", "se") #rename columns
#descriptive stats
(settlement.data[1,3]-settlement.data[2,3])/settlement.data[1,3] #percent change between treatments
(settlement.data[3,3]-settlement.data[4,3])/settlement.data[3,3] #percent change between treatments
mean.sets <- aggregate(Prop.Settled ~ Secondary, data = settlement, FUN= "mean") #calculate mean by secondary treatment
(mean.surs[1,2]-mean.surs[2,2])/mean.surs[1,2] #percent change between secondary treatments
Fig29 <- ggplot(data=settlement.data, aes(x=Secondary, y=mean, group=Origin, colour=Origin, shape=Origin)) + #plot data
geom_line(size=0.7, position=position_dodge(.1)) + #plot lines
scale_colour_manual(values=c("gray", "black")) + #set line color
geom_point(size=4, position=position_dodge(.1), colour="black") + #set point characteristics
scale_shape_manual(values=c(1,18)) + #set shapes
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), #plot error bars
width=0, position=position_dodge(.1), colour="black") + #set error bar characteristics
annotate("text", x = 0.85, y = 0.80, label = "a") +
annotate("text", x = 0.8, y = 0.68, label = "ab") +
annotate("text", x = 2.25, y = 0.56, label = "bc") +
annotate("text", x = 2.2, y = 0.49, label = "c") +
ggtitle("D)") + #plot title
xlab("Treatment of Offspring") + #plot x axis label
ylab("Settlement") + #plot y axis label
ylim(0,1) + #Y axis limits
theme_bw() + #theme black and white
theme(axis.line = element_line(color = 'black'), #Set the axes color
axis.text=element_text(size=16), #set text size
axis.title=element_text(size=18,face="bold"), #set axis title text size
strip.text.x = element_text(size = 16, colour = "black", face="bold"),
panel.border = element_blank(), #Set the border
axis.line.x = element_line(color = 'black'), #Set the axes color
axis.line.y = element_line(color = 'black'), #Set the axes color
axis.text.x=element_text(angle=0), #text angle
panel.grid.major = element_blank(), #Set the major gridlines
panel.grid.minor = element_blank(), #Set the minor gridlines
plot.background=element_blank(),  #Set the plot background
legend.key = element_blank(),  #remove legend background
legend.position="none",  #set legend location
plot.title = element_text(face = 'bold',
size = 12,
hjust = 0)) #set title attributes
Fig29
set.GLM <-  glmer(cbind(Settle, Not.Settle) ~ Origin*Secondary +(1|Chamber), data=settlement, family="binomial", na.action = "na.fail") #repeated measures ANOVA with random intercept but not slope
summary(set.GLM) #view summary
dredge(set.GLM) #describe model selection
Growth.RM <- lme(log10(growth.rate+1) ~ Origin*Secondary*Timepoint, random = ~ 1|Chamber.num/Timepoint, data=All.Growth, na.action = "na.fail") #repeated measures ANOVA
summary(Growth.RM) #view results
Grow.Results <- summary(Growth.RM) #view results
anova(Growth.RM) #view results
dredge(Growth.RM) #describe model selection
